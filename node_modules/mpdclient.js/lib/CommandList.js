"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CommandList = (function () {
    /**
     * Creates command list.
     *
     * @param {Array} commands - Array of Command objects.
     * @param {string} mode - Mode of command list execution. This param impact on response returned from MPD.
     *
     * @return {object} - Exemplar of CommandList object.
     *
     * @see https://www.musicpd.org/doc/protocol/command_lists.html for details.
     */
    function CommandList(commands, mode) {
        if (mode === void 0) { mode = CommandList.COMMAND_LIST_BEGIN; }
        this.commands = commands;
        this.mode = mode;
    }
    /**
     * Getter for commands.
     *
     * @returns {Array} - Command list`s commands.
     */
    CommandList.prototype.getCommands = function () {
        return this.commands;
    };
    /**
     * Getter for mode.
     *
     * @returns {string} - Command list mode.
     */
    CommandList.prototype.getMode = function () {
        return this.mode;
    };
    /**
     * Build command list query. It should have next form:
     *    (command_list_begin|command_list_begin_ok)\n
     *    command1_query\n
     *    command2_query\n
     *    commandN_query\n
     *    command_list_end\n
     *
     * @return {string} - Built query.
     */
    CommandList.prototype.buildQuery = function () {
        if (!this.query) {
            var chunks = this.getCommands().reduce(function (prev, cmd) {
                prev.push(cmd.buildQuery());
                return prev;
            }, [this.getMode()]);
            chunks.push(CommandList.COMMAND_LIST_END);
            this.query = chunks.join('');
        }
        return this.query;
    };
    return CommandList;
}());
/**
 * One of allowed modes for work with command list in MPD.
 *
 * If this one will chosen then MPD will return response of command list
 * execution as it was a single command.
 *
 * @type {string}
 */
CommandList.COMMAND_LIST_BEGIN = 'command_list_begin\n';
/**
 * Second one of allowed modes for work with command list in MPD.
 *
 * If this one will chosen then MPD will return response of command list
 * execution separated by COMMAND_LIST_OK_SEPARATOR.
 *
 * @type {string}
 */
CommandList.COMMAND_LIST_OK_BEGIN = 'command_list_ok_begin\n';
/**
 * Service const for construction command list.
 *
 * @type {string}
 */
CommandList.COMMAND_LIST_END = 'command_list_end\n';
/**
 * Command response separator for CL with COMMAND_LIST_OK_BEGIN execution mode.
 *
 * @type {RegExp}
 */
CommandList.COMMAND_LIST_OK_SEPARATOR = /^list_OK$/gm;
exports.MPDCommandList = CommandList;
