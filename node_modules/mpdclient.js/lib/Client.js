"use strict";
/// <reference.d='/node_modules/@types/node/index.d.ts' />
/// <reference.d='/node_modules/@types/es6-promise/index.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
var ResponseParser_1 = require("./ResponseParser");
var net_1 = require("net");
var Client = (function () {
    // @todo: Add tracking of idle status.
    /**
     * Creates new client.
     *
     * @param {string} host - Hostname of MPD server.
     * @param {number} port - Port of MPD server.
     */
    function Client(host, port) {
        this.host = host;
        this.port = port;
    }
    /**
     * Create socket; connect and handle base response from server.
     *
     * @returns {Promise<(Socket|string)>} - Promise obj with connected socket, error otherwise.
     */
    Client.prototype.connect = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            // As NodeJS works in async mode we can't store socket as
            // class property.
            var socket = new net_1.Socket();
            socket.connect(_this.port, _this.host);
            // Force returning result in human-readable view to evade toString conversion.
            socket.setEncoding('utf8');
            // Handle socket events.
            socket.on('data', function (data) {
                // Because there are can be multiple command invocation for the same client instance.
                // So it should be local variable passed as result to resolve callback.
                resolve(socket);
            });
            socket.on('error', function (error) {
                reject(error);
            });
        });
    };
    /**
     * Execute IExecutable object.
     *
     * @param {IExecutable} command - Command or CommandList exemplar.
     *
     * @returns {Promise<string>} - Promise which will return parsed response or it will reject with an error.
     */
    Client.prototype.execute = function (command) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            // Connect to sever and if success execute an command and close socket.
            _this
                .connect()
                .then(function (socket) {
                var result = '';
                socket.on('data', function (data) {
                    result += data;
                });
                socket.on('error', function (error) {
                    reject(error);
                });
                socket.on('end', function () {
                    // When we collected all data returned from MPD we can pass it to Parser.
                    var responseParser = new ResponseParser_1.ResponseParser(result, command);
                    responseParser.parse(resolve, reject);
                });
                // Need to send FIN packet as we don't want to write something else.
                socket.end(command.buildQuery());
            }, function (error) {
                reject(error);
            });
        });
    };
    return Client;
}());
exports.MPDClient = Client;
