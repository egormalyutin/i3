// Generated by CoffeeScript 1.12.5
var ADDR, LOCAL, METRIC, SYMB_METRIC, allcodes, contains, fs, getCurrent, got, log, matches, program, task, weather;

got = require('got');

program = require('commander');

fs = require('fs');

log = console.log;

program.version('0.0.1').option('-l, --locationcode [code]', 'location code of your city').option('-v, --view', 'log all location codes; useful with "| less"').option('-m, --metric [symbol]', 'specify metric: C for celsius, F for farenhieght. Celsius defaultly.').parse(process.argv);

if (program.locationcode) {
  task = 'get';
}

if (program.view) {
  task = 'view';
}

if (task === 'view') {
  allcodes = fs.readFile(__dirname + '/locationcodes', 'utf8', function(err, data) {
    if (err) {
      throw err;
    }
    if (data) {
      return log(data);
    }
  });
}

if (task === 'get') {
  if (!program.locationcode) {
    throw 'You need to specify your city. Start with -h for view help.';
    process.exit(1);
  }
  if (program.metric === 'F') {
    SYMB_METRIC = "F";
    METRIC = 0;
  } else {
    SYMB_METRIC = "C";
    METRIC = 1;
  }
  LOCAL = "ASI|RU|RS058|OMSK";
  ADDR = 'http://rss.accuweather.com/rss/liveweather_rss.asp\?metric\=' + METRIC + '\&locCode\=' + LOCAL;
  getCurrent = function(text) {
    var res;
    res = (text.match(/.*Currently.*/i))[0];
    res = res.replace(/\t/ig, '');
    res = res.replace(/\\t/ig, '');
    res = res.replace(/\<(\/*)title\>/ig, '');
    return res;
  };
  matches = function(text, args) {
    var arg, i, len;
    for (i = 0, len = args.length; i < len; i++) {
      arg = args[i];
      if (text.match(arg)) {
        return true;
      }
    }
    return false;
  };
  contains = function(obj, comp) {
    var prop, res, val;
    res = [];
    for (prop in comp) {
      val = comp[prop];
      if (obj[prop]) {
        res.push(val);
      }
    }
    return res;
  };
  weather = {
    tests: {
      sunny: ["Sunny", "Mostly Sunny", "Partly Sunny", "Intermittent Clouds", "Hazy Sunshine", "Hot"],
      cloudy: ["Mostly Cloudy", "Cloudy", "Dreary (Overcast)", "Fog"],
      rainy: ["Showers", "Mostly Cloudy w/ Showers", "Partly Sunny w/ Showers", "T-Storms", "Mostly Cloudy w/ T-Storms", "Partly Sunny w/ T-Storms", "Rain"],
      windy: ['Windy'],
      snow: ["Flurries", "Mostly Cloudy w/ Flurries", "Partly Sunny w/ Flurries", "Snow", "Mostly Cloudy w/ Snow", "Ice", "Sleet", "Freezing Rain", "Rain and Snow", "Cold"],
      night: ["Clear", "Mostly Clear", "Partly Cloudy", "Intermittent Clouds", "Hazy Moonlight", "Mostly Cloudy", "Partly Cloudy w/ Showers", "Mostly Cloudy w/ Showers", "Partly Cloudy w/ T-Storms", "Mostly Cloudy w/ Flurries", "Mostly Cloudy w/ Snow"]
    },
    test: function(text, tests) {
      var i, len, prop, res, test;
      if (!tests) {
        tests = [];
        for (prop in weather.tests) {
          tests.push(prop);
        }
      }
      res = {};
      for (i = 0, len = tests.length; i < len; i++) {
        test = tests[i];
        if (weather.tests[test]) {
          res[test] = matches(text, weather.tests[test]);
        }
      }
      return res;
    },
    getSymbs: function(test) {
      var symbs;
      symbs = contains(test, {
        sunny: "",
        cloudy: "",
        rainy: "",
        windy: "",
        snow: "",
        night: ""
      });
      return symbs;
    },
    phrase: function(text) {
      var mas, phrase, temp, test;
      test = weather.test(text);
      mas = weather.getSymbs(test);
      temp = (function() {
        var regexp;
        regexp = new RegExp('\\d+' + SYMB_METRIC, 'i');
        return (text.match(regexp))[0];
      })();
      mas.push(temp);
      phrase = mas.join(' ');
      return phrase;
    }
  };
  got(ADDR).then(function(response) {
    var answer;
    answer = response.body;
    return log(weather.phrase(getCurrent(answer)));
  })["catch"](function(error) {
    return log(error.response.body);
  });
}
